import asyncio
from asyncio.log import logger
from cgitb import text
from hashlib import new
from aiogram import types, Dispatcher
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import CallbackQuery

from tgbot.keyboards.inline_name_user import get_menu_name_user
from tgbot.keyboards.inline_name_user_data import touch_data_start_name
from tgbot.keyboards.reply_main import main_menu
from tgbot.misc.states import CheckName

# from tgbot.services.db_api import db_gino, db_commands
from tgbot.services.db_api import user_commands_db
from tgbot.services.db_api import create_tables_bd


def register_start_bot(dp: Dispatcher):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç
    @dp.message_handler(commands='start')
    async def start_command(message: types.Message, state: FSMContext):
        logger.info('[v] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n'
              f'{message.from_user}\n'
              f'-------------------------------------------')
        await message.answer_photo(
            photo='AgACAgIAAxkBAAIN02M_PRukNN6IGUi5vdDvKAPaGglYAAIsxDEbTZH4SYrwWgTo2e8iAQADAgADcwADKgQ',
            caption=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ —á–∞—Ç –±–æ—Ç–µ —Å–∞–ª–æ–Ω–∞: <b>¬´–ò–ª—å –¥–µ –§—Ä–∞–Ω—Å¬ª</b>üíÖ\n\n'
                    f'–ú—ã –Ω–∞—Ö–æ–¥–∏–º—ã –ø–æ –∞–¥—Ä–µ—Å—É:\n'
                    f'üìç –≥.–ú–æ—Å–∫–≤–∞, —É–ª.–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥, –¥. 1\n\n'
                    f'–í —ç—Ç–æ–º —á–∞—Ç –±–æ—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏, —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏, '
                    f'—Ç–∞–∫ –∂–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è —Å–∞–º—ã–µ —Å–æ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞ '
                    f'–∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω–∏–º –æ –í–∞—à–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏ –Ω–∞–∫–∞–Ω—É–Ω–µ.\n\n'
                    f'–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n–ù–æ, –¥–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—èüëá')

        name_user = message.from_user.first_name
        username = message.from_user.username
        if name_user:
            await message.answer(
                f'–í–∞–º –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ, –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –í–∞–º –ø–æ –∏–º–µ–Ω–∏: {name_user}?',
                reply_markup=get_menu_name_user())
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?üëá')
            await CheckName.Q2.set()
            await asyncio.sleep(60)
            if await state.get_state():
                await state.finish()


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    @dp.callback_query_handler(
        touch_data_start_name.filter(choice_button='True') | touch_data_start_name.filter(choice_button='False'))
    async def answer_start_name(call: CallbackQuery, callback_data):
        if callback_data['choice_button'] == 'True':
            await call.bot.answer_callback_query(call.id)
            await call.message.answer(
                f'–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {call.from_user["first_name"]}, –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –º–µ–Ω—é –Ω–∏–∂–µ.\n\n'
                f'(–ï—Å–ª–∏ –º–µ–Ω—é —Å–ø—Ä—è—Ç–∞–ª–æ—Å—å, –Ω–∞–∂–º–∏—Ç–µ üéõ, —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)',
                reply_markup=main_menu)
            user_id = call.from_user['id']
            user = user_commands_db.select_user(user_id)
            print(user)
            if user:
                user_commands_db.update_user(id_user=user_id, name=call.from_user["first_name"])
            else:
                user_commands_db.add_user(user_id=user_id, 
                    first_name=call.from_user.first_name, 
                    username=call.from_user.username)

        elif callback_data['choice_button'] == 'False':
            await call.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –í–∞—à–µ –∏–º—è:')
            await CheckName.Q2.set()

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –∏—Ö –≤–æ–æ–±—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    @dp.message_handler(state=CheckName.Q2)
    async def rename_user(message: types.Message, state: FSMContext):
        await state.finish()
        new_name = message.text
        user_id = message.from_user['id']
        await state.update_data(new_name_user=new_name)
        user = user_commands_db.select_user(user_id)
        if user:
            user_commands_db.update_user(user_id, name=new_name)
        else:
            user_commands_db.add_user(user_id=user_id, 
                    first_name=new_name, 
                    username=message.from_user.username)
        await message.answer(f'{new_name}, –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ! \n–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –º–µ–Ω—é –Ω–∏–∂–µ.\n\n'
                             f'(–ï—Å–ª–∏ –º–µ–Ω—é —Å–ø—Ä—è—Ç–∞–ª–æ—Å—å, –Ω–∞–∂–º–∏—Ç–µ üéõ, —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)',
                             reply_markup=main_menu)

    @dp.message_handler(text='–°–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—ã')
    async def create_table(message: types.message):
        create_tables_bd.create_table_appointment()
        create_tables_bd.create_table_appointment_services()
        create_tables_bd.create_table_category_services()
        create_tables_bd.create_table_masters()
        create_tables_bd.create_table_services()
        create_tables_bd.create_table_users()