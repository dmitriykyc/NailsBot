from aiogram import Dispatcher, types
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import CallbackQuery

from Nails_bot.tgbot.keyboards.inline_choice_master_data import touch_button_master
# from Nails_bot.tgbot.keyboards.inline_choice_services import get_menu_choice_services, get_menu_choice_services_all, \
#     get_menu_service, get_done_menu, choose_master
# from Nails_bot.tgbot.keyboards.inline_choice_services_data import choice_services_touch_button, pagination, \
#     category_services_touch_button, choose_data_and_time
from Nails_bot.tgbot.keyboards.inline_choice_master import get_menu
from Nails_bot.tgbot.keyboards.inline_datatime import get_menu_years, get_menu_month, get_menu_day, get_menu_time
from Nails_bot.tgbot.keyboards.inline_datetime_data import create_datetime
from Nails_bot.tgbot.keyboards.reply_choice_type import menu_choice_type
from Nails_bot.tgbot.misc.states import ChooseServices
from Nails_bot.tgbot.services.db_api import db_commands
from Nails_bot.tgbot.services.db_api.db_commands import get_all_masters, select_master, select_services_from_category, \
    select_service
from Nails_bot.tgbot.services.db_api.db_gino import on_startup, close_startup


async def result_message_sum(data):
    '''–§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã'''
    sum_price = 0
    choose_service_list = '\n'
    for ell in data:
        service = await select_service(int(ell))
        choose_service_list += f'üî∏ {service.name}\n'
        sum_price += service.price
    return [choose_service_list, sum_price]


def register_make_an_entry_bot(dp: Dispatcher):
    #     # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
    # @dp.message_handler(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
    # async def make_an_entry(messages: types.Message):
    #     await messages.answer('–û—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?', reply_markup=menu_choice_type)

    # # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", —Ç—É—Ç –±—É–¥—É—Ç –≤—Å–µ –º–∞—Å—Ç–µ—Ä–∞, –∫ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å—Å—è –¥–∞—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ
    # @dp.message_handler(text='–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞')
    # async def sent_master(messages: types.Message):
    #     await on_startup(dp)
    #     masters = await get_all_masters()
    #     for ell in masters:
    #         await messages.answer_photo(photo=ell.photo_master_id, caption=f'–ú–∞—Å—Ç–µ—Ä: <b>{ell.name}</b>\n'
    #                                                                        f'{ell.disc_master}.\n'
    #                                                                        f'–†–µ–π—Ç–∏–Ω–≥: 5/5 üåü',
    #                                     reply_markup=get_menu(ell.master_id))
    #
    #     await close_startup(dp)

    # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û –ú–∞—Å—Ç–µ—Ä–µ"
    @dp.callback_query_handler(touch_button_master.filter(aboute='True'))
    async def message_about_master(call: CallbackQuery, callback_data):
        await on_startup(dp)
        master = await select_master(id_master=int(callback_data["id"]))
        photo_master = master.photo_master_id

        await call.message.answer_photo(photo_master, caption=f'–ú–∞—Å—Ç–µ—Ä: {master.name}\n'
                                                              f'–†–µ–π—Ç–∏–Ω–≥: 5 –∏–∑ 5\n'
                                                              f'–ü—Ä–∏–∑–≤–∞–Ω–∏–µ: {master.disc_master}')
        await close_startup(dp)

    # # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å" –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ callback –ø–æ—Å–ª–µ –≤—ã–±–æ–∞ —É—Å–ª—É–≥
    # @dp.callback_query_handler(touch_button.filter(aboute='False') | choose_data_and_time.filter(go_d_t='True'))
    # async def touch_inline_button(call: CallbackQuery, callback_data, state: FSMContext):
    #     print(callback_data)
    #     id_master = callback_data['id_mast']
    #     await state.update_data(id_master=id_master)
    #     await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥: ', reply_markup=get_menu_years())
    #
    # # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—ã–±–æ—Ä—É –≥–æ–¥–∞, –º–µ—Å—è—Ü–∞, –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏
    # @dp.callback_query_handler(create_datetime.filter())
    # async def touch_datetime(call: CallbackQuery, callback_data, state: FSMContext):
    #     print(f'@dp.callback_query_handler(create_datetime.filter())\n'
    #           f'{call=}\n'
    #           f'{callback_data=}')
    #     if callback_data['step'] == 'get_year':
    #         await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ú–µ—Å—è—Ü')
    #         await call.message.edit_reply_markup(get_menu_month(callback_data['year']))
    #     if callback_data['step'] == 'get_month':
    #         await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ')
    #         await call.message.edit_reply_markup(get_menu_day(year=callback_data['year'],
    #                                                           month=callback_data['month']))
    #     if callback_data['step'] == 'get_day':
    #         await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:')
    #         await call.message.edit_reply_markup(get_menu_time(year=callback_data['year'],
    #                                                            month=callback_data['month'],
    #                                                            day=callback_data['day']))
    #
    #     if callback_data['step'] == 'get_time':
    #         await call.message.delete_reply_markup()
    #         await state.update_data(time=callback_data['month'])
    #         await state.update_data(month=callback_data['month'])
    #         await state.update_data(day=callback_data['day'])
    #         result_data = await state.get_data()
    #         print(result_data)
    #         if result_data['id_master'] == '':
    #             await call.message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏:\n'
    #                                       f'–î–∞—Ç–∞: {result_data["day"]}.{result_data["month"]}\n\n'
    #                                       f'–ù–∞–∂–º–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞.',
    #                                       reply_markup=choose_master())
    #         else:
    #             await call.message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –º–∞—Å—Ç–µ—Ä—É 1212 –Ω–∞ '
    #                                       f'\n\n {await state.get_data()}')

    # @dp.message_handler(text='–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É')
    # async def choose_service(message: types.Message, state: FSMContext):
    #     print(await state.get_data())
    #     await on_startup(dp)
    #     category_all = await db_commands.get_all_services_category()
    #     await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:', reply_markup=get_menu_choice_services_all(0, category_all))
    #     await state.update_data(services=[], sum_price=0)
    #     await close_startup(dp)

    # @dp.callback_query_handler(pagination.filter(name='next_page') | pagination.filter(name='back_page'))
    # async def answer_callback(call: CallbackQuery, callback_data):
    #     '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–∞–ª–µ–µ –∏ –Ω–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö'''
    #     await call.answer()
    #     page = int(callback_data['page'])
    #     back_or_next = callback_data['name']
    #     if back_or_next == 'next_page':
    #         page += 1
    #     else:
    #         page -= 1
    #     await on_startup(dp)
    #     category_all = await db_commands.get_all_services_category()
    #     await call.message.edit_reply_markup(get_menu_choice_services_all(page, category_all))
    #     await close_startup(dp)

    # @dp.callback_query_handler(category_services_touch_button.filter())
    # async def services_edit_message(call: CallbackQuery, callback_data, state: FSMContext):
    #     '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –∫–Ω–æ–ø–∫–∞–º —É—Å–ª—É–≥'''
    #     id_category = int(callback_data['id_category'])
    #     await on_startup(dp)
    #     services = await select_services_from_category(id_category)
    #     call_data = await state.get_data()
    #     data_for_text = await result_message_sum(call_data['services'])
    #     await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.\n'
    #                                  f'–í—ã–±—Ä–∞–Ω—ã —É—Å–ª—É–≥–∏:{data_for_text[0]}\n'
    #                                  f'–û–±—â–∞—è —Å—É–º–º–∞: {data_for_text[1]} —Ä—É–±.',
    #                                  reply_markup=get_menu_service(services, call_data['services']))
    #
    #     await state.update_data(id_category=id_category)
    #     await close_startup(dp)

    # @dp.callback_query_handler(choice_services_touch_button.filter())
    # async def services_edit_message(call: CallbackQuery, callback_data, state: FSMContext):
    #     '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —Å —É—Å–ª—É–≥–∞–º–∏'''
    #     all_services = await state.get_data('services')
    #     list_services = all_services["services"]
    #     if int(callback_data['id']) in list_services:
    #         list_services.remove(int(callback_data['id']))
    #     else:
    #         list_services.append(int(callback_data['id']))
    #     await state.update_data(services=list_services)
    #     all_services = await state.get_data()
    #     print(all_services)
    #     next_all_serv = await state.get_data('services')
    #     data = await state.get_data()
    #     await call.answer()
    #
    #     call_data = await state.get_data()
    #     id_category = call_data['id_category']
    #
    #     await on_startup(dp)
    #     services = await select_services_from_category(id_category)
    #     data_for_text = await result_message_sum(call_data['services'])
    #     print(data_for_text)
    #     await call.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.\n'
    #                                       f'–í—ã–±—Ä–∞–Ω—ã —É—Å–ª—É–≥–∏:{data_for_text[0]}\n'
    #                                       f'–û–±—â–∞—è —Å—É–º–º–∞: {data_for_text[1]} —Ä—É–±.',
    #                                  reply_markup=get_menu_service(services, call_data['services']))
    #     await close_startup(dp)

    # @dp.callback_query_handler(text='back_to_category')
    # async def choose_service2(call: CallbackQuery, state: FSMContext):
    #     '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"'''
    #     await on_startup(dp)
    #     category_all = await db_commands.get_all_services_category()
    #     call_data = await state.get_data()
    #     data_for_text = await result_message_sum(call_data['services'])
    #     await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω—ã —É—Å–ª—É–≥–∏:{data_for_text[0]}\n'
    #                                  f'–û–±—â–∞—è —Å—É–º–º–∞: {data_for_text[1]} —Ä—É–±.\n',
    #                                  reply_markup=get_menu_choice_services_all(0, category_all))
    #
    #     await close_startup(dp)

    # @dp.callback_query_handler(choose_data_and_time.filter())
    # async def done_choose(call: CallbackQuery, callback_data, state: FSMContext):
    #     await on_startup(dp)
    #     call_data = await state.get_data()
    #     data_for_text = await result_message_sum(call_data['services'])
    #     await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω—ã —É—Å–ª—É–≥–∏:{data_for_text[0]}\n'
    #                                  f'–û–±—â–∞—è —Å—É–º–º–∞: {data_for_text[1]} —Ä—É–±.\n',
    #                                  reply_markup=get_done_menu())
    #     await close_startup(dp)

    # # –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ –º–∞—Å—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
    # @dp.callback_query_handler(text='choose_master')
    # async def choose_master_after_all(call: CallbackQuery):
    #     await on_startup(dp)
    #     masters = await get_all_masters()
    #     for ell in masters:
    #         await call.message.answer_photo(photo=ell.photo_master_id, caption=f'–ú–∞—Å—Ç–µ—Ä: <b>{ell.name}</b>\n'
    #                                                                        f'{ell.disc_master}.\n'
    #                                                                        f'–†–µ–π—Ç–∏–Ω–≥: 5/5 üåü',
    #                                         reply_markup=get_menu(ell.master_id))
    #
    #     await close_startup(dp)

