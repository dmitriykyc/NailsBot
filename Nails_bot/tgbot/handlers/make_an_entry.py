from aiogram import Dispatcher, types
from aiogram.types import CallbackQuery

from Nails_bot.tgbot.keyboards.inline_choice_master import get_menu
from Nails_bot.tgbot.keyboards.inline_choice_master_data import touch_button
from Nails_bot.tgbot.keyboards.reply_choice_type import menu_choice_type
from Nails_bot.tgbot.services.db_api.db_commands import get_all_masters, select_master
from Nails_bot.tgbot.services.db_api.db_gino import on_startup
from aiogram_calendar import SimpleCalendar, DialogCalendar, dialog_cal_callback


def register_make_an_entry_bot(dp: Dispatcher):
    @dp.message_handler(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
    async def make_an_entry(messages: types.Message):
        await messages.answer('–û—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?', reply_markup=menu_choice_type)

    @dp.message_handler(text='–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞')
    async def sent_master(messages: types.Message):
        await on_startup(dp)
        masters = await get_all_masters()
        for ell in masters:
            await messages.answer_photo(photo=ell.photo_master_id, caption=f'–ú–∞—Å—Ç–µ—Ä: <b>{ell.name}</b>\n'
                                                                           f'{ell.disc_master}.\n'
                                                                           f'–†–µ–π—Ç–∏–Ω–≥: 5/5 üåü',
                                        reply_markup=get_menu(ell.master_id))

    @dp.callback_query_handler(touch_button.filter(aboute='True'))
    async def message_about_master(call: CallbackQuery, callback_data):
        await on_startup(dp)
        master = await select_master(id_master=int(callback_data["id"]))
        photo_master = master.photo_master_id

        await call.message.answer_photo(photo_master, caption=f'–ú–∞—Å—Ç–µ—Ä: {master.name}\n'
                                                              f'–†–µ–π—Ç–∏–Ω–≥: 5 –∏–∑ 5\n'
                                                              f'–ü—Ä–∏–∑–≤–∞–Ω–∏–µ: {master.disc_master}')










    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–∫–µ–∏
    # @dp.callback_query_handler(touch_button.filter(aboute='False'))
    # async def touch_inline_button(call: CallbackQuery, callback_data):
    #     '''–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏–∑ Inline –∫–Ω–æ–ø–æ–∫'''
    #
    #     # await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: –ï–ª–µ–Ω–∞\n"
    #     #                           "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è:", reply_markup=await SimpleCalendar().start_calendar())
    #     DialogCalendar.months = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä—Ç", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥", "–°–µ–Ω—Ç", "–û–∫—Ç", "–ù–æ—è–±", "–î–µ–∫"]
    #     await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: –ï–ª–µ–Ω–∞\n"
    #                               "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è:", reply_markup=await DialogCalendar().start_calendar())
    #     # await call.bot.answer_callback_query(call.id)
    #     # await call.message.answer('This is right')
    #     # print(callback_data)
    #     # print(call)
    #     # print('eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee')
    #
    # @dp.callback_query_handler(dialog_cal_callback.filter())
    # async def process_dialog_calendar(callback_query: CallbackQuery, callback_data):
    #     selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
    #     if selected:
    #         await callback_query.message.answer(
    #             f'You selected {date.strftime("%d/%m/%Y")}'
    #         )
