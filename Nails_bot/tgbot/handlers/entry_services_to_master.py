import datetime

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove

from tgbot.keyboards.inline_choice_master import get_menu, get_menu_two
from tgbot.keyboards.inline_choice_master_data import touch_button_master, touch_about_master
from tgbot.keyboards.inline_choice_services import get_menu_choice_services_all, get_menu_service, \
    get_done_menu, choose_master
from tgbot.keyboards.inline_choice_services_data import pagination, category_services_touch_button, \
    choice_services_touch_button, choose_data_and_time
from tgbot.keyboards.inline_datatime import get_menu_month, get_menu_day, get_menu_time
from tgbot.keyboards.inline_datetime_data import create_datetime

from tgbot.services.db_api import masters_commands_db, services_commands_db


async def result_message_sum(data):
    '''–§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã'''
    sum_price = 0
    choose_service_list = '\n'
    for ell in data:
        service = services_commands_db.select_service(int(ell))
        choose_service_list += f'üî∏ {service["name"]}\n'
        sum_price += service["price"]
    return [choose_service_list, sum_price]


async def create_appointment_bd(data_state, call, id_master):
    print(50*'1-1')
    date_and_time_str = f'{data_state["day"]}.{data_state["month"]}.2022 {data_state["time"]}:00'
    date_and_time = datetime.datetime.strptime(date_and_time_str, '%d.%m.%Y %H:%M')
    user_id = call['from']['id']

    # data_new_appointment = Appointment(user_id=user_id, id_master=int(id_master), datetime=date_and_time)
    # await data_new_appointment.create()
    data_new_appointment = services_commands_db.insert_appointment(
        user_id=user_id, id_master=int(id_master), datetime=date_and_time)
    for ell in data_state['services']:
        services_commands_db.add_services_to_appointment(data_new_appointment, ell)

    return date_and_time_str


def register_entry_services_to_master(dp: Dispatcher):
    print(50*'10')
    # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û –ú–∞—Å—Ç–µ—Ä–µ"
    @dp.callback_query_handler(touch_about_master.filter(way='stm'))
    async def message_about_master(call: CallbackQuery, callback_data):
        master = masters_commands_db.select_master(id_master=int(callback_data["id"]))
        # photo_master = master['photo_master_id']
        await call.message.edit_caption(f'–û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –æ–Ω —Ö–æ—Ä–æ—à', reply_markup=get_menu_two(
            master.master_id, 'stm'))

    # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—ã–±–æ—Ä—É –≥–æ–¥–∞, –º–µ—Å—è—Ü–∞, –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏
    @dp.callback_query_handler(create_datetime.filter(way='stm'))
    async def touch_datetime(call: CallbackQuery, callback_data, state: FSMContext):

        print(50 * '9')

        await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—ã
        if callback_data['step'] == 'start':
            await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?')
            await call.message.edit_reply_markup(get_menu_month(callback_data['year'], way='stm'))

        if callback_data['step'] == 'get_month':
            await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ')
            await call.message.edit_reply_markup(get_menu_day(year=callback_data['year'],
                                                              month=callback_data['month'], way='stm'))
        if callback_data['step'] == 'get_day':
            await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:')
            await call.message.edit_reply_markup(get_menu_time(year=callback_data['year'],
                                                               month=callback_data['month'],
                                                               day=callback_data['day'], way='stm'))

        if callback_data['step'] == 'get_time':  # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ–π–¥–µ–Ω–æ, —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            # await call.message.delete_reply_markup()
            await state.update_data(time=callback_data['month'])
            await state.update_data(month=callback_data['month'])
            await state.update_data(day=callback_data['day'])
            state_data = await state.get_data()

            data_for_text = await result_message_sum(state_data['services'])  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            await call.message.edit_text(f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥–∏:\n'
                                         f'{data_for_text[0]}\n\n'
                                         f'–û–±—â–∞—è —Å—É–º–º–∞: {data_for_text[1]}\n\n'
                                         f'–î–∞—Ç–∞: {state_data["day"]}.{state_data["month"]}.2022\n\n'
                                         f'–ù–∞–∂–º–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞.',
                                         reply_markup=choose_master())

    @dp.callback_query_handler(text='choose_master')
    async def sent_masters(call: CallbackQuery):
        print(50 * '8')

        masters = masters_commands_db.get_all_masters()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        for ell in masters:
            await call.message.answer_photo(photo=ell["photo_master_id"], caption=f'–ú–∞—Å—Ç–µ—Ä: <b>{ell["name"]}</b>\n'
                                                                               f'{ell["disc_master"]}.\n'
                                                                               f'–†–µ–π—Ç–∏–Ω–≥: 5/5 üåü',
                                            reply_markup=get_menu(ell["master_id"], 'stm'))


    # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å" –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –º–∞—Å—Ç–µ—Ä–∞
    @dp.callback_query_handler(touch_button_master.filter(aboute='False') and touch_button_master.filter(way='stm'))
    async def touch_inline_button(call: CallbackQuery, callback_data, state: FSMContext):
        print(50 * '7')
        id_master = callback_data['id_mast']
        await state.update_data(id_master=id_master)
        data_state = await state.get_data()
        date_time = await create_appointment_bd(data_state, call, id_master)

        data_for_text = await result_message_sum(data_state['services'])  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        master = masters_commands_db.select_master(int(data_state['id_master']))
        await call.message.answer(f'‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –º–∞—Å—Ç–µ—Ä—É: {master["name"]} \n'
                                  f'üóì –î–∞—Ç–∞: {date_time}\n\n'
                                  f'–ù–∞ —É—Å–ª—É–≥–∏: \n'
                                  f'{data_for_text[0]}\n\n'
                                  f'üí¥  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data_for_text[1]} —Ä—É–±.\n'
                                  f'üìç –ñ–¥—ë–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ–º—É: –ì. –ú–æ—Å–∫–≤–∞, –£–ª. –û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥, –¥. 1 ')

    @dp.callback_query_handler(text='choose_service_main')
    async def choose_service(call: CallbackQuery, state: FSMContext):
        '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Reply Button "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É" '''
        print(100 * '6')
        category_all = services_commands_db.get_all_services_category()  # –¢—è–Ω–µ–º –∏–∑ –ë–î –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        data_state = await state.get_data()
        await call.message.edit_text(f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª. \n\n'
                             f'–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª—É–≥.',
                             reply_markup=get_menu_choice_services_all(0, category_all, 'stm'))
        await state.update_data(services=[], sum_price=0)  # –ó–∞–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    @dp.callback_query_handler(pagination.filter(way='stm'))
    async def answer_callback(call: CallbackQuery, callback_data):
        '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–∞–ª–µ–µ –∏ –Ω–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö'''
        print(50 * '5')
        await call.answer()
        # –°–æ–∑–¥–∞—ë–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        page = int(callback_data['page'])
        back_or_next = callback_data['name']
        if back_or_next == 'next_page':
            page += 1
        else:
            page -= 1
        category_all = services_commands_db.get_all_services_category()  # –¢—è–Ω–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await call.message.edit_reply_markup(get_menu_choice_services_all(page, category_all, 'stm'))

    @dp.callback_query_handler(category_services_touch_button.filter(way='stm'))
    async def services_edit_message(call: CallbackQuery, callback_data, state: FSMContext):
        '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –∫–Ω–æ–ø–∫–∞–º —É—Å–ª—É–≥'''
        print(50 * '4')
        id_category = int(callback_data['id_category'])  # –ó–∞–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é

        services = services_commands_db.select_services_from_category(id_category)  # –¢—è–Ω–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –ë–î
        state_data = await state.get_data()  # –ó–∞–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data_for_text = await result_message_sum(state_data['services'])  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏ (–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n\n'
                                     f'–†–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:{data_for_text[0]}\n'
                                     f'–û–±—â–∞—è —Å—É–º–º–∞: {data_for_text[1]} —Ä—É–±.',
                                     reply_markup=get_menu_service(services, state_data['services'], 'stm'))

        await state.update_data(id_category=id_category)

    @dp.callback_query_handler(choice_services_touch_button.filter(way='stm'))
    async def services_edit_message(call: CallbackQuery, callback_data, state: FSMContext):
        '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —Å —É—Å–ª—É–≥–∞–º–∏'''
        print(50 * '3')
        all_services = await state.get_data()
        list_services = all_services["services"]  # –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏

        # –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ —É–±–∏—Ä–∞–µ—Ç —É—Å–ª—É–≥—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–∏ –ø–µ—Ä–≤–æ–º - –¥–æ–±–∞–≤–ª—è–µ—Ç.
        if int(callback_data['id']) in list_services:
            list_services.remove(int(callback_data['id']))
        else:
            list_services.append(int(callback_data['id']))

        await state.update_data(services=list_services)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await call.answer()  # –æ—Ç–∫–ª—é—á–∞–µ–º —á–∞—Å–∏–∫–∏ —Å –∫–Ω–æ–ø–∫–∏

        state_data = await state.get_data()  # –°–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        id_category = state_data['id_category']  # –ó–∞–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é

        services = services_commands_db.select_services_from_category(id_category)  # –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
        data_for_text = await result_message_sum(state_data['services'])  # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        await call.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.\n\n'
                                          f'–†–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:{data_for_text[0]}\n'
                                          f'–û–±—â–∞—è —Å—É–º–º–∞: {data_for_text[1]} —Ä—É–±.',
                                     reply_markup=get_menu_service(services, state_data['services'], 'stm'))

    @dp.callback_query_handler(text='back_to_category_stm')
    async def choose_service2(call: CallbackQuery, state: FSMContext):
        '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"'''
        print(50 * '2')

        category_all = services_commands_db.get_all_services_category()  # –¢—è–Ω–µ–º –∏–∑ –ë–î –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        call_data = await state.get_data()  # –ó–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data_for_text = await result_message_sum(call_data['services'])  # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω—ã —É—Å–ª—É–≥–∏:{data_for_text[0]}\n'
                                     f'–û–±—â–∞—è —Å—É–º–º–∞: {data_for_text[1]} —Ä—É–±.\n',
                                     reply_markup=get_menu_choice_services_all(0, category_all, 'stm'))


    @dp.callback_query_handler(choose_data_and_time.filter(way='stm'))
    async def done_choose(call: CallbackQuery, callback_data, state: FSMContext):
        ''' –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–±—Ä–∞–ª —Å–µ–±–µ —É—Å–ª—É–≥, —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è '''
        print(50 * '1')

        state_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data_for_text = await result_message_sum(state_data['services'])  # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω—ã —É—Å–ª—É–≥–∏:{data_for_text[0]}\n'
                                     f'–û–±—â–∞—è —Å—É–º–º–∞: {data_for_text[1]} —Ä—É–±.\n',
                                     reply_markup=get_done_menu(way='stm'))
